// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StudHunter.DB.Postgres;

#nullable disable

namespace StudHunter.DB.Postgres.Migrations
{
    [DbContext(typeof(StudHunterDbContext))]
    [Migration("20250813115708_FixEntities")]
    partial class FixEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("studhunter")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Invitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Message")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("UUID");

                    b.Property<Guid?>("ResumeId")
                        .HasColumnType("UUID")
                        .HasColumnName("ResumeId");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("UUID");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("VacancyId")
                        .HasColumnType("UUID")
                        .HasColumnName("VacancyId");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("ResumeId");

                    b.HasIndex("VacancyId");

                    b.HasIndex("SenderId", "ReceiverId", "ResumeId")
                        .IsUnique()
                        .HasFilter("\"ResumeId\" IS NOT NULL");

                    b.HasIndex("SenderId", "ReceiverId", "VacancyId")
                        .IsUnique()
                        .HasFilter("\"VacancyId\" is not NULL");

                    b.ToTable("Invitations", "studhunter");
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.AchievementTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("IconUrl")
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Target")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderNumber")
                        .IsUnique();

                    b.ToTable("AchievementTemplates", "studhunter");
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Courses", "studhunter");
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.Faculty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Faculties", "studhunter");
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.Favorite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("EmployerId")
                        .HasColumnType("UUID");

                    b.Property<Guid?>("ResumeId")
                        .HasColumnType("UUID");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("UUID");

                    b.Property<Guid>("UserId")
                        .HasColumnType("UUID");

                    b.Property<Guid?>("VacancyId")
                        .HasColumnType("UUID");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.HasIndex("ResumeId");

                    b.HasIndex("StudentId");

                    b.HasIndex("VacancyId");

                    b.HasIndex("UserId", "EmployerId")
                        .IsUnique()
                        .HasFilter("\"EmployerId\" IS NOT NULL");

                    b.HasIndex("UserId", "ResumeId")
                        .IsUnique()
                        .HasFilter("\"ResumeId\" IS NOT NULL");

                    b.HasIndex("UserId", "StudentId")
                        .IsUnique()
                        .HasFilter("\"StudentId\" IS NOT NULL");

                    b.HasIndex("UserId", "VacancyId")
                        .IsUnique()
                        .HasFilter("\"VacancyId\" IS NOT NULL");

                    b.ToTable("Favorites", "studhunter");
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("UUID");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("UUID");

                    b.Property<DateTime>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.HasIndex("SentAt");

                    b.ToTable("Messages", "studhunter");
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.Resume", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(2500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BOOLEAN")
                        .HasDefaultValue(false);

                    b.Property<Guid>("StudentId")
                        .HasColumnType("UUID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("Resumes", "studhunter");
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.Speciality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Specialities", "studhunter");
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.StudentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("Id");

                    b.ToTable("StudentStatuses", "studhunter");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Учусь"
                        },
                        new
                        {
                            Id = 2,
                            Name = "В поисках стажировки"
                        },
                        new
                        {
                            Id = 3,
                            Name = "В поисках работы"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Стажируюсь"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Работаю"
                        });
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.StudyPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateOnly>("BeginYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATE")
                        .HasDefaultValue(new DateOnly(2025, 8, 13));

                    b.Property<int>("CourseNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.Property<Guid>("FacultyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                    b.Property<Guid>("SpecialityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                    b.Property<Guid>("StudentId")
                        .HasColumnType("UUID");

                    b.Property<int>("StudyForm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("SpecialityId");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("StudyPlans", "studhunter");
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.StudyPlanCourse", b =>
                {
                    b.Property<Guid>("StudyPlanId")
                        .HasColumnType("UUID");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("UUID");

                    b.HasKey("StudyPlanId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("StudyPlanCourses", "studhunter");
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BOOLEAN")
                        .HasDefaultValue(false);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.UserAchievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("AchievementAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<Guid>("AchievementTemplateId")
                        .HasColumnType("UUID");

                    b.Property<Guid>("UserId")
                        .HasColumnType("UUID");

                    b.HasKey("Id");

                    b.HasIndex("AchievementTemplateId");

                    b.HasIndex("UserId", "AchievementTemplateId")
                        .IsUnique();

                    b.ToTable("UserAchievements", "studhunter");
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.Vacancy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(2500)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EmployerId")
                        .HasColumnType("UUID");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BOOLEAN")
                        .HasDefaultValue(false);

                    b.Property<decimal?>("Salary")
                        .HasPrecision(10, 2)
                        .HasColumnType("DECIMAL(10, 2)")
                        .HasAnnotation("CheckConstraint", "Salary >= 0 AND Salary <= 1000000");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.ToTable("Vacancies", "studhunter");
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.VacancyCourse", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("UUID");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("UUID")
                        .HasColumnName("VacancyId");

                    b.HasKey("CourseId", "VacancyId");

                    b.HasIndex("VacancyId");

                    b.ToTable("VacancyCourses", "studhunter");
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.Administrator", b =>
                {
                    b.HasBaseType("StudHunter.DB.Postgres.Models.User");

                    b.Property<int>("AdminLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)");

                    b.ToTable("Administrators", "studhunter");
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.Employer", b =>
                {
                    b.HasBaseType("StudHunter.DB.Postgres.Models.User");

                    b.Property<bool>("AccreditationStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BOOLEAN")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Specialization")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasAnnotation("Url", true);

                    b.ToTable("Employers", "studhunter");
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.Student", b =>
                {
                    b.HasBaseType("StudHunter.DB.Postgres.Models.User");

                    b.Property<DateOnly>("BirthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATE")
                        .HasDefaultValue(new DateOnly(1, 1, 1));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsForeign")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BOOLEAN")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Photo")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uuid");

                    b.HasIndex("StatusId");

                    b.ToTable("Students", "studhunter");
                });

            modelBuilder.Entity("Invitation", b =>
                {
                    b.HasOne("StudHunter.DB.Postgres.Models.User", "Receiver")
                        .WithMany("ReceivedInvitations")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudHunter.DB.Postgres.Models.Resume", "Resume")
                        .WithMany("Invitations")
                        .HasForeignKey("ResumeId");

                    b.HasOne("StudHunter.DB.Postgres.Models.User", "Sender")
                        .WithMany("SentInvitations")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudHunter.DB.Postgres.Models.Vacancy", "Vacancy")
                        .WithMany("Invitations")
                        .HasForeignKey("VacancyId");

                    b.Navigation("Receiver");

                    b.Navigation("Resume");

                    b.Navigation("Sender");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.Favorite", b =>
                {
                    b.HasOne("StudHunter.DB.Postgres.Models.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId");

                    b.HasOne("StudHunter.DB.Postgres.Models.Resume", "Resume")
                        .WithMany()
                        .HasForeignKey("ResumeId");

                    b.HasOne("StudHunter.DB.Postgres.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.HasOne("StudHunter.DB.Postgres.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId");

                    b.HasOne("StudHunter.DB.Postgres.Models.Vacancy", "Vacancy")
                        .WithMany()
                        .HasForeignKey("VacancyId");

                    b.Navigation("Employer");

                    b.Navigation("Resume");

                    b.Navigation("Student");

                    b.Navigation("User");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.Message", b =>
                {
                    b.HasOne("StudHunter.DB.Postgres.Models.User", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudHunter.DB.Postgres.Models.User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.Resume", b =>
                {
                    b.HasOne("StudHunter.DB.Postgres.Models.Student", "Student")
                        .WithOne("Resume")
                        .HasForeignKey("StudHunter.DB.Postgres.Models.Resume", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.StudyPlan", b =>
                {
                    b.HasOne("StudHunter.DB.Postgres.Models.Faculty", "Faculty")
                        .WithMany("StudyPlans")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudHunter.DB.Postgres.Models.Speciality", "Speciality")
                        .WithMany("StudyPlans")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudHunter.DB.Postgres.Models.Student", "Student")
                        .WithOne("StudyPlan")
                        .HasForeignKey("StudHunter.DB.Postgres.Models.StudyPlan", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("Speciality");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.StudyPlanCourse", b =>
                {
                    b.HasOne("StudHunter.DB.Postgres.Models.Course", "Course")
                        .WithMany("StudyPlanCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudHunter.DB.Postgres.Models.StudyPlan", "StudyPlan")
                        .WithMany("StudyPlanCourses")
                        .HasForeignKey("StudyPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("StudyPlan");
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.UserAchievement", b =>
                {
                    b.HasOne("StudHunter.DB.Postgres.Models.AchievementTemplate", "AchievementTemplate")
                        .WithMany("UserAchievements")
                        .HasForeignKey("AchievementTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudHunter.DB.Postgres.Models.User", "User")
                        .WithMany("Achievements")
                        .HasForeignKey("UserId");

                    b.Navigation("AchievementTemplate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.Vacancy", b =>
                {
                    b.HasOne("StudHunter.DB.Postgres.Models.Employer", "Employer")
                        .WithMany("Vacancies")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.VacancyCourse", b =>
                {
                    b.HasOne("StudHunter.DB.Postgres.Models.Course", "Course")
                        .WithMany("VacancyCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudHunter.DB.Postgres.Models.Vacancy", "Vacancy")
                        .WithMany("Courses")
                        .HasForeignKey("VacancyId");

                    b.Navigation("Course");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.Student", b =>
                {
                    b.HasOne("StudHunter.DB.Postgres.Models.StudentStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Status");
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.AchievementTemplate", b =>
                {
                    b.Navigation("UserAchievements");
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.Course", b =>
                {
                    b.Navigation("StudyPlanCourses");

                    b.Navigation("VacancyCourses");
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.Faculty", b =>
                {
                    b.Navigation("StudyPlans");
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.Resume", b =>
                {
                    b.Navigation("Invitations");
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.Speciality", b =>
                {
                    b.Navigation("StudyPlans");
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.StudyPlan", b =>
                {
                    b.Navigation("StudyPlanCourses");
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.User", b =>
                {
                    b.Navigation("Achievements");

                    b.Navigation("Favorites");

                    b.Navigation("ReceivedInvitations");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentInvitations");

                    b.Navigation("SentMessages");
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.Vacancy", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Invitations");
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.Employer", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("StudHunter.DB.Postgres.Models.Student", b =>
                {
                    b.Navigation("Resume");

                    b.Navigation("StudyPlan");
                });
#pragma warning restore 612, 618
        }
    }
}
